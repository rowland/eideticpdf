<erml>
  <styles>
	  <font id="title" name="NewCenturySchlbk" size="14" />
	  <font id="body" name="NewCenturySchlbk" size="12" />
	  <font id="code" name="Courier" size="12" />
	  <brush id="method" color="LightSteelBlue" />
	  <layout id="desc" manager="vbox" vpadding="3pt" />
	  <layout id="options" manager="table" vpadding="5pt" />
  </styles>
  <rules>
    <!--
      title { font: title; font.underline: true; }
      method { font: code; fill: method; padding: 3pt; }
      desc p { font.line-height: 1.6; }
      options { padding: 5pt; }
      key { width: 30%; padding: 3pt; font: code; line-height: 1.3; }
      definition { line-height: 1.3; }
      code { font: code; }
    -->
  </rules>
  <pages margin="0.5" units="in" font="body">
    <define id="title" tag="p" />
    <define id="method" tag="p" />
    <define id="desc" tag="div" layout="desc" />
		<define id="options" tag="div" layout="options" order="rows" cols="2" />
		<define id="key" tag="p" />
		<define id="definition" tag="p" />
		<define id="code" tag="span" />
    <page>
      <title>Life Cycle</title>

      <method>new</method>
      <desc>
        <p>Instantiate a new DocumentWriter object.  Document is <i>not</i> open for writing at this point.</p>
      </desc>

      <method>open(options={})</method>
      <desc>
        <p>Open the document for writing.</p>
        <p>The following document options apply:</p>
        <options>
          <key>:pages_up</key>
          <definition>A tuple (array) of the form <code>[pages_across, pages_down]</code> specifying the layout of virtual pages.  Defaults to <code>[1, 1]</code> (no virtual pages).</definition>

          <key>:pages_up_layout</key>
          <definition>
            When <code>:across</code>, virtual pages proceed from left to right before top to bottom.
            When <code>:down</code>, virtual pages proceed from top to bottom before left to right.
          </definition>
        </options>
        <p>In addition, any of the options for <code>open_page</code> may be supplied and will apply to each page, unless explicitly overridden.</p>
      </desc>

      <method>to_s</method>
      <desc>
        <p>Render document to PDF and return as a binary string.</p>
      </desc>

      <method>close</method>
      <desc>
        <p>Close any open pages, preparing the document for rendering to PDF.</p>
      </desc>

      <method>doc(options={}, &amp;block)</method>
      <desc>
        <p>Open the document for writing and yield to the block given before calling <code>close</code>.</p>
      </desc>

      <method>open_page(options={})</method>
      <desc>
        <p>Open a page for writing.  Raises Exception if a page is already open.</p>
        <p>The following page options apply:</p>
        <options>
          <key>:compress</key>
          <definition>Compress page streams using zlib deflate.</definition>
        
          <key>:units</key>
          <definition>
            A symbol from <code>EideticPDF::UNIT_CONVERSION</code> hash, specifying ratio of units to points.  Defaults to <code>:pt</code>.
            Other choices are <code>:in</code> for inches and <code>:cm</code> for centimeters.  Custom units may be added.
          </definition>
        
          <key>:v_text_align</key>
          <definition>Initial vertical text alignment for page.  See <code>v_text_align</code> method.</definition>

          <key>:font</key>
          <definition>Initial font for page.  Defaults to <code>{ :name => 'Helvetica', :size => 12 }</code>.</definition>
        
          <key>:fill_color</key>
          <definition>Initial fill color.  Defaults to 0 (black).  See <code>fill_color</code> method.</definition>
        
          <key>:line_color</key>
          <definition>Initial line color.  Defaults to 0 (black).  See <code>line_color</code> method.</definition>
        
          <key>:line_height</key>
          <definition>Initial line height.  Defaults to 1.7.  See <code>line_height</code> method.</definition>
        
          <key>:line_width</key>
          <definition>Initial line width.  Defaults to 1.0.  See <code>line_width</code> method.</definition>
        
          <key>:margins</key>
          <definition>Page margins.  Defaults to 0.  See <code>margins</code> method.</definition>
        
          <key>:unscaled</key>
          <definition>If true, virtual pages are not scaled down.  Defaults to <code>false</code>.</definition>
        </options>
      </desc>
    </page>
    <page>
      <method>close_page</method>
      <desc>
        <p>Close the current open page.  Raises Exception if no page is currently open.</p>
      </desc>

      <method>page(options={}, &amp;block)</method>
      <desc>
        <p>Open a page for writing and yield to the block given before calling <code>close_page</code>.</p>
        <p><code>options</code> is passed through to <code>open_page</code>.</p>
      </desc>

      <method>new_page(options={})</method>
      <desc>
        <p>Close the current page and begin a new page with the specified options.</p>
        <options>
          <key>options</key>
          <definition>See <code>open_page</code> method.</definition>
        </options>
      </desc>
      
      <method>units(units=nil)</method>
      <desc>
        <p>Set units measurements are to be specified in.  If no units are specified, returns current units setting.  Valid units include <code>:pt</code> (points), <code>:in</code> (inches) and <code>:cm</code> (centimeters) by default.</p>
        <p>Custom units can be specified by updating the <code>EideticPDF::UNIT_CONVERSION</code> hash with a new symbol and conversion ratio.</p>
      </desc>

      <method>margins(*margins)</method>
      <desc>
        <p>Set top, right, bottom and left margins.  If 1, 2 or 4 values are not specified, returns current margins as a tuple (array) of values in the form [top, right, bottom, left].</p>
        <options>
          <key>margins</key>
          <definition>When 4 values are given, [top, right, bottom, left].  When 2 values are given, [top and bottom, right and left].  When 1 value is specified, it is used for all 4 settings.</definition>
        </options>
      </desc>

      <method>margin_top</method>
      <desc>
        <p>Returns top margin as set by <code>margins</code> method.</p>
      </desc>
      
      <method>margin_right</method>
      <desc>
        <p>Returns right margin as set by <code>margins</code> method.</p>
      </desc>
      
      <method>margin_bottom</method>
      <desc>
        <p>Returns bottom margin as set by <code>margins</code> method.</p>
      </desc>
      
      <method>margin_left</method>
      <desc>
        <p>Returns left margin as set by <code>margins</code> method.</p>
      </desc>
      
      <method>canvas_width</method>
      <desc>
        <p><code>page_height</code> excluding top and bottom margins.</p>
      </desc>
      
      <method>canvas_height</method>
      <desc>
        <p><code>page_width</code> excluding left and right margins.</p>
      </desc>
    </page>
    <page>      
      <method>tabs(tabs=nil)</method>
      <desc>
        <p>Set horizontal tabs using an array of numbers or a comma-delimited string.  If no tabs are specified, returns current tabs.  Use false to clear current tab stops.</p>
      </desc>
      
      <method>tab(&amp;block)</method>
      <desc>
        <p>Move right to next horizontal tab.  If no more tab stops exist, then moves to first tab stop on the following line.  If a block is given, the value returned is used instead as the vertical distance to move down.</p>
      </desc>
      
      <method>vtabs(tabs=nil)</method>
      <desc>
        <p>Set vertical tabs using an array of numbers or a comma-delimited string.  If no tabs are specified, returns current tabs.  Use false to clear current tab stops.</p>
      </desc>

      <method>vtab(&amp;block)</method>
      <desc>
        <p>Move down to next vertical tab.  If no more tab stops exist and a block is given, moves up to the first vertical tab stop and right the value returned by the block.</p>
      </desc>

      <method>indent(value=nil, absolute=false)</method>
      <desc>
        <p>Set horizontal indentation.  If no value is specified, returns current indentation setting.</p>
        <options>
          <key>value</key>
          <definition>The new indentation.</definition>
          
          <key>absolute</key>
          <definition>If <code>true</code>, the new value is relative only to the left margin.  If <code>false</code>, value is relative to previous indentation.</definition>
        </options>
        <p>The indent setting is used by the <code>puts</code> and <code>new_line</code> methods.</p>
      </desc>
      
      <method>page_width</method>
      <desc>
        <p>Returns page width in current units.</p>
      </desc>
      
      <method>page_height</method>
      <desc>
        <p>Returns page height in current units.</p>
      </desc>
      
      <method>line_height(height=nil)</method>
      <desc>
        <p>Set line height as used by methods like <code>paragraph</code> that display multiple lines of text.  If no value is specified, returns current <code>line_height</code>.</p>
        <options>
          <key>height</key>
          <definition>Ratio of <code>font_size</code> to effective line height.</definition>
        </options>
      </desc>
    </page>
    <page>
      <method>move_to(x, y)</method>
      <desc>
        <p>Move pen to point <code>(x, y)</code>.</p>
      </desc>

      <method>pen_pos(x=nil, y=nil)</method>
      <desc>
        <p>Move pen to point <code>(x, y)</code> like <code>move_to</code>, returning previous location.  If x is not specified, returns current location.</p>
      </desc>
      
      <method>move_by(dx, dy)</method>
      <desc>
        <p>Move the pen to a new location relative to the current location.</p>
        <options>
          <key>dx</key>
          <definition>Horizontal distance to move pen.  Positive values move right.  Negative values move left.</definition>
          
          <key>dy</key>
          <definition>Vertical distance to move pen.  Positive values move down.  Negative values move up.</definition>
        </options>
      </desc>
      
      <method>line_to(x, y)</method>
      <desc>
        <p>Draw a line from the current location to point <code>(x, y)</code>.  If <code>auto_path</code> is off, a new segment is appended to the current path.</p>
      </desc>
      
      <method>line(x, y, angle, length)</method>
      <desc>
        <p>Draw a line from point <code>(x, y)</code> to a point <code>length</code> units distant at <code>angle</code> degrees.</p>
      </desc>

      <method>rectangle(x, y, width, height, options={})</method>
      <desc>
        <p>Draw a rectangle with the specified <code>width</code> and <code>height</code> and its top, left corner at <code>(x, y)</code>.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          
          <key>:clip</key>
          <definition>If true and a block is given, the shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          
          <key>:reverse</key>
          <definition>Draw polygon clockwise.  This is useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
      
      <method>curve(x0, y0, x1, y1, x2, y2, x3, y3)</method>
      <desc>
        <p>Draw a cubic Bezier curve from <code>(x0, y0)</code> to <code>(x3, y3)</code> with control points <code>[x1, y1]</code> and <code>(x2, y2)</code>.  If the first point does not coincide with the current position, any current path is stroked and a new path is begun.  Otherwise, the curve is appended to the current path.</p>
      </desc>
      
      <method>curve_points(points)</method>
      <desc>
        <p>Draw a series of cubic Bezier curves.  After moving to the first point, a curve to the 4th point is appended to the current path with the 2nd and 3rd points acting as control points.  A curve is appended to the current path for each additional group of 3 points, with the 1st and 2nd point in each group acting as control points.</p>
        <options>
          <key>points</key>
          <definition>array of <code>Location</code> structs</definition>
        </options>
      </desc>
    </page>
    <page>

      <method>points_for_circle(x, y, r)</method>
      <desc>
        <p>Returns array of <code>Location</code> structs for circle, suitable for feeding to <code>curve_points</code> method.  See <code>circle</code> method.</p>
      </desc>
      
      <method>circle(x, y, r, options={}, &amp;block)</method>
      <desc>
        <p>Draw a circle with center <code>x, y</code> and radius <code>r</code>.  Direction is counterclockwise (anticlockwise), unless <code>:reverse</code> option is specified.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          <key>:clip</key>
          <definition>The shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          <key>:reverse</key>
          <definition>Draw circle clockwise.  Useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
    
      <method>points_for_ellipse(x, y, rx, ry)</method>
      <desc>
        <p>Returns array of <code>Location</code> structs for ellipse, suitable for feeding to <code>curve_points</code> method.  See <code>ellipse</code> method.</p>
      </desc>

      <method>ellipse(x, y, rx, ry, options={})</method>
      <desc>
        <p>Draw an ellipse with foci (<code>x, y</code>) and (<code>x, y</code>) and radius <code>r</code>.  Direction is counterclockwise (anticlockwise), unless <code>:reverse</code> option is specified.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          <key>:clip</key>
          <definition>The shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          <key>:reverse</key>
          <definition>Draw ellipse clockwise.  Useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
      
      <method>points_for_arc(x, y, r, start_angle, end_angle)</method>
      <desc>
        <p>Returns array of <code>Location</code> structs for arc, suitable for feeding to <code>curve_points</code> method.  See <code>arc</code> method.</p>
      </desc>
      
      <method>arc(x, y, r, start_angle, end_angle, move_to0=false)</method>
      <desc>
        <p>Draw an arc with origin <code>x, y</code> and radius <code>r</code> from <code>start_angle</code> to <code>end_angle</code> degrees.  Direction is counterclockwise (anticlockwise), unless <code>end_angle</code> &lt; <code>start_angle</code>.  Angles are allowed to exceed 360 degrees.</p>
        <p>By default, arc extends the current path to the point where the arc begins.  If <code>move_to0</code> is true (or there is no current path) a move is performed to where the arc begins.</p>
        <p>This method returns immediately if <code>start_angle == end_angle</code>.</p>
      </desc>
    </page>
    <page>
      <method>pie(x, y, r, start_angle, end_angle, options={})</method>
      <desc>
        <p>Draw a pie-shaped wedge with origin <code>x, y</code> and radius <code>r</code> from <code>start_angle</code> to <code>end_angle</code> degrees.</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          <key>:clip</key>
          <definition>If true and a block is given, the shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          <key>:reverse</key>
          <definition>By default, the bounding path is drawn from <code>(x, y)</code> to <code>(r, start_angle)</code> through <code>(r, end_angle)</code> and back to <code>(x, y)</code>.  This order is reversed if <code>:reverse => true</code>.  This is useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
      
      <method>arch(x, y, r1, r2, start_angle, end_angle, options={}, &amp;block)</method>
      <desc>
        <p>Draw an arch with origin <code>x, y</code> from <code>start_angle</code> to _end_angle_ degrees.  The result is a bounded area between radii <code>r1</code> and <code>r2</code>.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          <key>:clip</key>
          <definition>If true and a block is given, the shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          <key>:reverse</key>
          <definition>By default, the bounding path is drawn from <code>(r1, start_angle)</code> to <code>(r1, end_angle)</code>, <code>(r2, end_angle)</code>, <code>(r2, start_angle)</code> and back to <code>(r1, start_angle)</code>.  This order is reversed if <code>reverse => true</code>.  This is useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>

      <method>points_for_polygon(x, y, r, sides, options={})</method>
      <desc>
        <p>Returns array of <code>Location</code> structs representing the vertices of a polygon.  See <code>polygon</code> method.</p>
      </desc>

      <method>polygon(x, y, r, sides, options={})</method>
      <desc>
        <p>Draw a polygon with origin <code>(x, y)</code>, radius <code>r</code> and the specified number of <code>sides</code>.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          
          <key>:clip</key>
          <definition>If true and a block is given, the shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          
          <key>:reverse</key>
          <definition>Draw polygon clockwise.  This is useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
    </page>
    <page>

      <method>star(x, y, r1, r2, points, options={})</method>
      <desc>
        <p>Draw a star with origin <code>(x, y)</code>, outer radius <code>r1</code>, inner radius <code>r2</code> and the specified number of <code>sides</code>.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:border</key>
          <definition>If true or a color, a border is drawn with the current or specified <code>line_color</code>, respectively. Defaults to <code>true</code>.</definition>
          
          <key>:fill</key>
          <definition>If true or a color, the area is filled with the current or specified <code>fill_color</code>, respectively. Defaults to <code>false</code>.</definition>
          
          <key>:clip</key>
          <definition>If true and a block is given, the shape acts as a clipping boundary for anything drawn within the supplied block.</definition>
          
          <key>:reverse</key>
          <definition>Draw polygon clockwise.  This is useful for drawing hollow shapes.</definition>
        </options>
        <p>These current settings also apply: <code>line_color</code>, <code>line_width</code>, <code>line_dash_pattern</code> and <code>fill_color</code>.</p>
      </desc>
      
      <method>auto_path</method>
      <desc>
        <p>Returns current status of auto_path.  Defaults to <code>true</code>.  False while in a block given to <code>path</code> method.  When <code>true</code>, paths are automatically stroked before a new, non-contiguous segment is appended or a closed shape is drawn.</p>
      </desc>
      
      <method>path(options={}, &amp;block)</method>
      <desc>
        <p>Turn off auto_path.  If a block is given, yields to it before filling and/or stroking anything drawn within it according to the <code>options</code> supplied.  The path may be non-contiguous.  Shapes may be hollow when inner paths are drawn in the opposite direction as outer paths.</p>
        <p>The following options apply:</p>
        <options>
          <key>:stroke</key><definition>If true or a color, the path will be stroked with the current or specified <code>line_color</code>, respectively.  Defaults to <code>false</code>.</definition>
          <key>:fill</key><definition>If true or a color, the area bounded by the path will be filled with the current or specified <code>fill_color</code>, respectively.  Defaults to <code>false</code>.</definition>
        </options>
      </desc>
      
      <method>fill</method>
      <desc>
        <p>Fill current path (begun by <code>path</code> method) and resume <code>auto_path</code>.  The <code>line_color</code> and <code>fill_color</code> in effect before <code>path</code> was begun are restored.  Raises Exception if no current path exists.</p>
      </desc>
      
      <method>stroke</method>
      <desc>
        <p>Stroke current path (begun by <code>path</code> method) and resume <code>auto_path</code>.  The <code>line_color</code> and <code>fill_color</code> in effect before <code>path</code> was begun are restored.  Raises Exception if no current path exists.</p>
      </desc>
      
      <method>fill_and_stroke</method>
      <desc>
        <p>Fill and stroke current path (begun by <code>pat</code> method) and resume <code>auto_path</code>.  The <code>line_color</code> and <code>fill_color</code> in effect before <code>path</code> was begun are restored.  Raises Exception if no current path exists.</p>
      </desc>
    </page>
    <page>
      
      <method>clip(options={}, &amp;block)</method>
      <desc>
        <p>Use current path as a clipping boundary for anything drawn within the supplied block.</p>
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:stroke</key>
          <definition>If true, the current path is stroked with the current <code>line_color</code>.  Defaults to <code>false</code>.</definition>
          
          <key>:fill</key>
          <definition>If true
          , the area bounded by the current path is filled with the current <code>fill_color</code>.  Defaults to <code>false</code>.</definition>
        </options>
      </desc>

      <method>line_cap_style(style=nil)</method>
      <desc>
        <p>Set the shape to be used at the ends of lines.  If no style is specified, returns current style.</p>
        <options>
          <key>style</key>
          <definition>One of the symbols :butt_cap, :round_cap or :projecting_square_cap, or a string 'butt_cap', 'round_cap' or 'projecting_square_cap'.</definition>
        </options>
      </desc>
      
      <method>line_dash_pattern(pattern=nil)</method>
      <desc>
        <p>Set the pattern of dashes and gaps used to draw lines.  If no pattern is specified, returns current pattern.</p>
        <options>
          <key>pattern</key>
          <definition>A string of the form '[dash gap] phase' or one of the symbols <code>:solid</code>, <code>:dotted</code> or <code>:dashed</code>.</definition>
        </options>
        <p>When a symbol is specified, dash and gap lengths are multiplied by <code>line_width</code> for proportion.</p>
      </desc>
      
      <method>line_width(value=nil, units=nil)</method>
      <desc>
        <p>Set line width used when stroking paths.  If no width is specified, returns current <code>line_width</code>.</p>
        <options>
          <key>value</key>
          <definition>If <code>value</code> is a number, the new <code>line_width</code> setting. If <code>value</code> is a symbol (such as :pt, :cm or :in), the units to return the current <code>line_width</code> in.  If <code>value</code> is a string, it may include the units as a suffix, e.g. "5.5in" for 5.5 inches.</definition>
          <key>units</key>
          <definition>Units value is expressed in.  Defaults to current units setting.</definition>
        </options>
      </desc>
      
      <method>named_colors</method>
      <desc>
        <p>Returns hash of named colors consisting of (name, color) pairs.  Initial value comes from EideticPDF::PdfK::NAMED_COLORS, but may be augmented or replaced.</p>
      </desc>
      
      <method>line_color(color=nil)</method>
      <desc>
        <p>Set line color, returning previous line color.  If no color is specified, returns current font color.</p>
        <options>
          <key>color</key>
          <definition>Tuple (array) containing [red, green, blue] components of new color (where components range from 0..255), string key into <code>named_colors</code> or integer encoded from rgb bytes where blue is in the least-significant byte.</definition>
        </options>
        <p>Return values are always in string or integer form.</p>
      </desc>
      
      <method>fill_color(color=nil)</method>
      <desc>
        <p>Set fill color, returning previous fill color.  If no color is specified, returns current fill color.</p>
        <options>
          <key>color</key>
          <definition>Tuple (array) containing [red, green, blue] components of new color (where components range from 0..255) or integer encoded from rgb bytes where blue is in the least-significant byte.</definition>
        </options>
        <p>Return values are always in integer form.</p>
      </desc>
    </page>
    <page>

      <method>font_color(color=nil)</method>
      <desc>
        <p>Set font color, returning previous font color.  If no color is specified, returns current font color.</p>
        <options>
          <key>color</key>
          <definition>Tuple (array) containing [red, green, blue] components of new color (where components range from 0..255) or integer encoded from rgb bytes where blue is in the least-significant byte.</definition>
        </options>
        <p>Return values are always in integer form.</p>
      </desc>
      
      <method>print(text, options={}, &amp;block)</method>
      <desc>
        <p>Print text, starting from the current position.</p>
        <p>The following options apply:</p>
        <options>
          <key>:align</key>
          <definition>When <code>:left</code>, left edge of text is aligned to current position.  When <code>:center</code>, text is centered at current position.  When <code>:right</code>, right edge of text is aligned to current position.  When any alignment is specified, the pen is restored to its original location.</definition>
          
          <key>:angle</key>
          <definition>Print text at the specified <code>angle</code> in degrees.  Defaults to 0.</definition>
          
          <key>:scale</key>
          <definition>Horizontal scaling of text, specified as ratio to normal width.  Defaults to 1.0.  Cannot be combined with <code>:clip</code>.</definition>
          
          <key>:underline</key>
          <definition>Override <code>underline</code> setting for this piece of text.</definition>
          
          <key>:clip</key>
          <definition>If true and a block is given, the edges of the text act as a clipping boundary for anything drawn within the supplied block.  Cannot be combined with <code>:scale</code>.</definition>
          
          <key>:fill</key>
          <definition>(Only applicable with <code>:clip</code>) Fill text and add to path for clipping.</definition>
          
          <key>:stroke</key>
          <definition>(Only applicable with <code>:clip</code>) Stroke text with current <code>line_color</code> and add to path for clipping.</definition>
        </options>
        <p>These current settings also apply: <code>font</code>, <code>font_color</code>, <code>line_color</code> (when outlines are stroked) and vertical text alignment (<code>v_text_align</code>).</p>
      </desc>
      
      <method>print_xy(x, y, text, options={}, &amp;block)</method>
      <desc>
        <p>Move to <code>(x, y)</code> and print text.  See <code>print</code> method.</p>
      </desc>
      
      <method>puts(text='', options={}, &amp;block)</method>
      <desc>
        <p>Print one or more lines of text before moving to the next line, as specified by <code>indent</code>.</p>
      </desc>
      
      <method>puts_xy(x, y, text, options={}, &amp;block)</method>
      <desc>
        <p>Move to <code>(x, y)</code> and print one or more lines of text indented to <code>x</code>.  See <code>puts</code> method.</p>
      </desc>

      <method>new_line(count=1)</method>
      <desc>
        <p>Move pen down one or more lines and back to current indent.</p>
        <options>
          <key>count</key>
          <definition>Number of lines to move down.</definition>
        </options>
      </desc>
      
      <method>width(text)</method>
      <desc>
        <p>Returns width of a string as rendered using the current font.</p>
      </desc>

      <method>wrap(text, length)</method>
      <desc>
        <p>Breaks text into tokens and reassembles into array of strings, each one not exceeding <code>length</code>.  Newlines are respected and all other white space is preserved.</p>
      </desc>

      <method>text_height(units=nil)</method>
      <desc>
        <p>Returns text height, based on the current font, excluding external leading.</p>
        <options>
          <key>units</key>
          <definition>Units the value is returned in.</definition>
        </options>
      </desc>
    </page>
    <page>
      <method>height(text='', units=nil)</method>
      <desc>
        <p>Returns height of a line or array of lines, including external leading as determined by <code>line_height</code>.</p>
        <options>
          <key>text</key>
          <definition>Line or array of lines to be measured.  Height is determined only by current font and number of lines.</definition>
          
          <key>units</key>
          <definition>Units result should be expressed in.  Defaults to current <code>units</code>.</definition>
        </options>
      </desc>

      <method>paragraph(text, options={})</method>
      <desc>
        <p>Wrap <code>text</code> and render with the following <code>options</code>.</p>
        <options>
          <key>:width</key>
          <definition>Maximum width to wrap text within.  Defaults to the canvas width minus the current horizontal position.</definition>
          
          <key>:height</key>
          <definition>Maximum height allowed.  Any text no
          t rendered will be returned by the method call.  Defaults to the canvas height minus the current vertical position.</definition>
          
          <key>:bullet</key>
          <definition>Render paragraph as a bullet, using the named bullet as defined using the <code>bullet</code> method.  The bullet width is subtracted from the <code>:width</code> specified.</definition>
        </options>
      </desc>
      
      <method>paragraph_xy(x, y, text, options={})</method>
      <desc>
        <p>Move to <code>(x, y)</code> and render paragraph.</p>
      </desc>
      
      <method>v_text_align(vta=nil)</method>
      <desc>
        <p>Set vertical text alignment.  This is the part of the text that would coincide with a line if one were drawn at the same coordinates as the text.</p>
        <options>
          <key>:above</key>
          <definition>At the top of the text, plus an amount equal to the height of descenders.</definition>
          
          <key>:top</key>
          <definition>At the top of the text--text is rendered below the line.</definition>
          
          <key>:middle</key>
          <definition>Through the middle of the text, like a strikeout.</definition>
          
          <key>:base</key>
          <definition>At the base of the text--text is rendered above the line, except for descenders.</definition>
          
          <key>:below</key>
          <definition>Below the text--text is rendered above the line, including descenders.</definition>
        </options>
        <p>Default is <code>:top</code>.</p>
      </desc>

      <method>underline(underline=nil)</method>
      <desc>
        <p>Set new underline status, returning previous status.  If new status is not specified, returns current underline status.</p>
      </desc>

      <method>type1_font_names</method>
      <desc>
        <p>Returns an array of font names, including weight and style, from the (local) fonts directory.</p>
      </desc>

    </page>
    <page>
      <method>font(name=nil, size=nil, options={})</method>
      <desc>
        <p>Set font, returning previous font.  If no font is specified, returns current font.</p>
        <options>
          <key>name</key>
          <definition>Base name of a Type1 font with metrics file in fonts directory.</definition>
          
          <key>size</key>
          <definition>Size of font in points.  See also <code>font_size</code> method.</definition>
        </options>
        
        <p>The following <code>options</code> apply:</p>
        <options>
          <key>:style</key>
          <definition>Bold, Italic, Oblique or a combination of weight and style such as BoldItalic or BoldOblique.  See <code>font_style</code> method.</definition>
          
          <key>:color</key>
          <definition>Font color as given to <code>font_color</code> method.  Color is unchanged if not specified.</definition>
          
          <key>:encoding</key>
          <definition>Currently-supported encodings include StandardEncoding, WinAnsiEncoding/CP1250, CP1250, CP1254, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-7, ISO-8859-9, ISO-8859-10, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16, MacTurkish or Macintosh.  Defaults to WinAnsiEncoding.</definition>
          
          <key>:sub_type</key>
          <definition>Currently only Type1 fonts are supported.  Defaults to Type1.</definition>
          
          <key>:fill</key>
          <definition>Fill text with current <code>font_color</code>.  Defaults to <code>true</code>.</definition>
          
          <key>:stroke</key>
          <definition>Stroke text with current <code>line_color</code>.  Defaults to <code>false</code>.</definition>
        </options>
      </desc>
      
      <method>font_style(style=nil)</method>
      <desc>
        <p>Set font style, returning previous font style.  If no style is specified, returns current font style.</p>
        <options>
          <key>style</key>
          <definition>Bold (or other weight), Italic, Oblique or combination such as BoldItalic or BoldOblique.</definition>
        </options>
        <p>Exact weights and combinations available depend on the font specification files in the (local) fonts directory.</p>
      </desc>

      <method>font_size(size=nil)</method>
      <desc>
        <p>Set font size, returning previous font size.  If no size is specified, returns current font size.</p>
        <options>
          <key>size</key>
          <definition>Size of font in points.</definition>
        </options>
      </desc>

    </page>
    <page>
      <method>jpeg?(image)</method>
      <desc>
        <p>Returns <code>true</code> if image is a buffer beginning with a JPEG signature.</p>
      </desc>
      
      <method>jpeg_dimensions(image)</method>
      <desc>
        <p>Returns a tuple (array) of image dimensions of the form [width, height, components, bits_per_component].  Raises ArgumentError if <code>image</code> is not a JPEG.</p>
      </desc>
      
      <method>print_image_file(image_file_name, x=nil, y=nil, width=nil, height=nil)</method>
      <desc>
        <p>Load graphic file (currently only JPEG is supported) from disk (or network, if open-uri library is loaded) and display at the specified location.</p>
        <options>
          <key>image_file_name</key>
          <definition>Path or URL to image.</definition>
          
          <key>x</key>
          <definition>Left edge of image is placed at this offset.  Defaults to <code>pen_pos.x</code>.</definition>
          
          <key>y</key>
          <definition>Top edge of image is placed at this offset.  Defaults to <code>pen_pos.y</code>.</definition>
          
          <key>width</key>
          <definition>Width to make image.  Defaults to natural image width or a width proportionate to <code>height</code> if <code>height</code> is specified.</definition>
          
          <key>height</key>
          <definition>Height to make image.  Defaults to natural image height or a height proportionate to <code>width</code> if <code>width</code> is specified.</definition>
        </options>
      </desc>

      <method>print_image(data, x=nil, y=nil, width=nil, height=nil)</method>
      <desc>
        <p>Display graphic (currently only JPEG is supported) from disk (or network, if open-uri library is loaded) and display at the specified location.</p>
        <options>
          <key>data</key>
          <definition>Buffer containing image.</definition>
          
          <key>x</key>
          <definition>Left edge of image is placed at this offset.  Defaults to <code>pen_pos.x</code>.</definition>
          
          <key>y</key>
          <definition>Top edge of image is placed at this offset.  Defaults to <code>pen_pos.y</code>.</definition>
          
          <key>width</key>
          <definition>Width to make image.  Defaults to natural image width or a width proportionate to <code>height</code> if <code>height</code> is specified.</definition>
          
          <key>height</key>
          <definition>Height to make image.  Defaults to natural image height or a height proportionate to <code>width</code> if <code>width</code> is specified.</definition>
        </options>
      </desc>

    </page>
  </pages>
<!--
    # Given a block, defines a named bullet.  Otherwise the named Bullet struct is returned.
    #
    # The following <code>options</code> apply:
    <key>:units</key><definition>The units that <code>:width</code> is expressed in.  Defaults to the current units setting.
    <key>:width</key><definition>The width of the area reserved for the bullet.
    #
    # If a block is given, the block should expect a <code>writer</code> parameter to be used for printing or drawing the bullet.
    # Within the block, all altered settings, other than the location, should be restored.
    <method>bullet(name, options={}, &block)</method>
      cur_page.bullet(name, options, &block)
    end

    # Rotate anything drawn within the supplied block <code>angle</code> degrees around origin <code>(x, y)</code>.
    <method>rotate(angle, x, y, &block)</method>
      cur_page.rotate(angle, x, y, &block)
    end

    <method>scale(x, y, scale_x, scale_y, &block)</method>
      cur_page.scale(x, y, scale_x, scale_y, &block)
    end


  end
end
-->
</erml>
